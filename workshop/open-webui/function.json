[{"id":"nim_openai","user_id":"ffdb27d8-5185-44ce-bbdb-88a5bb137be1","name":"NIM OpenAI","type":"pipe","content":"\"\"\"\ntitle: OpenAI Manifold Pipe\nauthor: open-webui\nauthor_url: https://github.com/open-webui\nfunding_url: https://github.com/open-webui\nDescription:  removes unwanted characters from responses\nversion: 0.1.10\n\"\"\"\n\nfrom pydantic import BaseModel, Field\nfrom typing import Optional, Union, Generator, Iterator\nfrom open_webui.utils.misc import get_last_user_message\n\nimport os\nimport requests\nimport json\n\n\nclass Pipe:\n    class Valves(BaseModel):\n        NAME_PREFIX: str = Field(\n            default=\"NIM/\",\n            description=\"The prefix applied before the model names.\",\n        )\n        OPENAI_API_BASE_URL: str = Field(\n            default=\"http://192.168.71.7:9999/v1\",\n            description=\"The base URL for OpenAI API endpoints.\",\n        )\n        MODEL: str = Field(\n            default=\"Meta-Llama-3-8B-Instruct\",\n            description=\"Model name to use.\",\n        )\n        OPENAI_API_KEY: str = Field(\n            default=\"nokey\",\n            description=\"Required API key to retrieve the model list.\",\n        )\n\n        pass\n\n    class UserValves(BaseModel):\n        OPENAI_API_KEY: str = Field(\n            default=\"123456\",\n            description=\"User-specific API key for accessing OpenAI services.\",\n        )\n\n    def __init__(self):\n        self.type = \"manifold\"\n        self.valves = self.Valves()\n        pass\n\n    def pipes(self):\n        if self.valves.OPENAI_API_KEY:\n            try:\n                headers = {}\n                headers[\"Authorization\"] = f\"Bearer {self.valves.OPENAI_API_KEY}\"\n                headers[\"Content-Type\"] = \"application/json\"\n\n                r = requests.get(\n                    f\"{self.valves.OPENAI_API_BASE_URL}/models\", headers=headers\n                )\n\n                models = r.json()\n                return [\n                    {\n                        \"id\": model[\"id\"],\n                        \"name\": f'{self.valves.NAME_PREFIX}{model[\"name\"] if \"name\" in model else model[\"id\"]}',\n                    }\n                    for model in models[\"data\"]\n                    if self.valves.MODEL in model[\"id\"]\n                ]\n\n            except Exception as e:\n\n                print(f\"Error: {e}\")\n                return [\n                    {\n                        \"id\": \"error\",\n                        \"name\": \"Could not fetch models from OpenAI, please update the API Key in the valves.\",\n                    },\n                ]\n        else:\n            return [\n                {\n                    \"id\": \"error\",\n                    \"name\": \"Global API Key not provided.\",\n                },\n            ]\n\n    def pipe(self, body: dict, __user__: dict) -> Union[str, Generator, Iterator]:\n        # This is where you can add your custom pipelines like RAG.\n        print(f\"pipe:{__name__}\")\n        print(__user__)\n\n        user_valves = __user__.get(\"valves\")\n\n        if not user_valves:\n            raise Exception(\"User Valves not configured.\")\n\n        if not user_valves.OPENAI_API_KEY:\n            raise Exception(\"OPENAI_API_KEY not provided by the user.\")\n\n        headers = {}\n        headers[\"Authorization\"] = f\"Bearer {user_valves.OPENAI_API_KEY}\"\n        headers[\"Content-Type\"] = \"application/json\"\n\n        model_id = body[\"model\"][body[\"model\"].find(\".\") + 1 :]\n        payload = {**body, \"model\": model_id}\n        if \"max_completion_tokens\" in payload:\n            payload.pop(\"max_completion_tokens\")\n        print(f\"payload {payload}\")\n\n        try:\n            r = requests.post(\n                url=f\"{self.valves.OPENAI_API_BASE_URL}/chat/completions\",\n                json=payload,\n                headers=headers,\n                stream=True,\n            )\n\n            r.raise_for_status()\n            print(f\"body {r}\")\n            if body[\"stream\"]:\n                return (line for i, line in enumerate(r.iter_lines()) if i >= 9)\n            else:\n                resp = r.json()\n                resp[\"choices\"][0][\"message\"][\"content\"] = resp[\"choices\"][0][\n                    \"message\"\n                ][\"content\"].replace(\n                    \"<|start_header_id|>assistant<|end_header_id|>\", \"\"\n                )\n                print(f\"response {resp}\")\n                return resp\n        except Exception as e:\n            return f\"Error: {e}\"\n","meta":{"description":"NIM OpenAI","manifest":{"title":"OpenAI Manifold Pipe","author":"open-webui","author_url":"https://github.com/open-webui","funding_url":"https://github.com/open-webui","Description":"removes unwanted characters from responses","version":"0.1.10"}},"is_active":true,"is_global":false,"updated_at":1727388996,"created_at":1727388991}]